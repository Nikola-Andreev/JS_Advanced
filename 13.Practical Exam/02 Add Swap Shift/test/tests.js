let createList = require('../code').createList
let expect = require('chai').expect

describe("createList", function() {
    let test
    beforeEach(function () {
       test = new createList()
    })
    describe('Add', function () {
        it("add element to collection", function() {
            test.add('4')
            test.add('3.5')
            test.add('pesho')
            expect(test.toString()).to.be.equal('4, 3.5, pesho')
        })
        it("add object", function() {
            test.add({Miki:'maus'})
            expect(test.toString()).to.be.equal('[object Object]')
        })
        it("add object", function() {
            test.add()
            expect(test.toString()).to.be.equal('')
        })
    })
    describe('Swap', function () {
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(1,2)).to.be.equal(true)
            expect(test.toString()).to.be.equal('pesho, 1, gosho, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(2,3)).to.be.equal(true)
            expect(test.toString()).to.be.equal('pesho, gosho, 2, 1')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(0,1)).to.be.equal(true)
            expect(test.toString()).to.be.equal('gosho, pesho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(-1,1)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(1,4)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(1.5,1)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(-1.6,'miki')).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap('2',1)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap('0','3')).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(0,3)).to.be.equal(true)
            expect(test.toString()).to.be.equal('2, gosho, 1, pesho')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(-0,-2)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(3,4)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(1,1)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(0,4)).to.be.equal(false)
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
        })
        it("", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(test.swap(3,0)).to.be.equal(true)
            expect(test.toString()).to.be.equal('2, gosho, 1, pesho')
        })
    })
    describe('Left shift', function () {
        it("add object", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            test.shiftLeft()
            expect(test.toString()).to.be.equal('gosho, 1, 2, pesho')
        })
        it("add object", function() {
            test.add('pesho')
            expect(test.toString()).to.be.equal('pesho')
            test.shiftLeft()
            expect(test.toString()).to.be.equal('pesho')
        })
        it("add object", function() {
            expect(test.toString()).to.be.equal('')
            test.shiftLeft()
            expect(test.toString()).to.be.equal('')
        })
    })
    describe('Right shift', function () {
        it("add object", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            test.shiftRight()
            expect(test.toString()).to.be.equal('2, pesho, gosho, 1')
        })
        it("add object", function() {
            test.add('pesho')
            expect(test.toString()).to.be.equal('pesho')
            test.shiftRight()
            expect(test.toString()).to.be.equal('pesho')
        })
        it("add object", function() {
            expect(test.toString()).to.be.equal('')
            test.shiftRight()
            expect(test.toString()).to.be.equal('')
        })
    })
    describe('toString', function () {
        it("add object", function() {
            test.add('pesho')
            test.add('gosho')
            test.add('1')
            test.add('2')
            expect(test.toString()).to.be.equal('pesho, gosho, 1, 2')
            expect(typeof test.toString()).to.be.equal('string')

        })
    })
})

